const char* HistogramShaderSource = R"(

#version 460 core
layout(local_size_x = 1024, local_size_y = 1, local_size_z = 1) in;

layout (location = 0) uniform uint inputCount;  
layout (location = 1) uniform uint binSize;

layout(binding = 0) buffer _inputData
{
    uint inputData[];
}; 

layout(std430, binding = 1) buffer _outputData
{
    uint outputData[];
};

uint localOutputBuffer[1024];

uint ParseByteAsUint(uint value, uint byteIndex) {
    return uint((value >> (byteIndex * 8)) & 255);
}

void IncrementHistogram(uint binIndex, uint amount) {
    atomicAdd(outputData[binIndex], amount);
}

void main()
{
    uint index = uint(gl_GlobalInvocationID.x);

    if (index * 4 >= inputCount)
    {
        return;
    }

    uint binCount = uint(ceil(256 / binSize));

    if (gl_GlobalInvocationID.x >= binCount)
    {
        return;
    }

    uint targetBinIndex = gl_LocalInvocationID.x % binCount;
    uint targetRangeMin = uint(targetBinIndex * binSize);
    uint targetRangeMax = uint((targetBinIndex + 1) * binSize);

    uint targetCount = 0;

    for (uint i = 0; i < inputCount / 4; i++)
    {
        for (uint byte = 0; byte < 4; byte++)
        {
            uint activeValue = ParseByteAsUint(inputData[i], byte);

            if (activeValue >= targetRangeMin){
                if (activeValue < targetRangeMax){
                    targetCount++;
                }
            }
        }
    }

    IncrementHistogram(targetBinIndex, targetCount);
}

)"; 