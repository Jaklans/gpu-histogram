const char* HistogramShaderSource = R"(

#version 460 core
layout(local_size_x = 1024, local_size_y = 1, local_size_z = 1) in;

layout (location = 0) uniform uint inputCount;  
layout (location = 1) uniform uint binSize;

layout(binding = 0) buffer _inputData
{
    uint inputData[];
}; 

layout(binding = 1) buffer _outputData
{
    uint outputData[];
};

uint ParseByteAsUint(uint value, uint byteIndex) {
    return uint((value >> (byteIndex * 8)) & 255);
}

void IncrementHistogram(uint value) {
    atomicAdd(outputData[value], 1);
}

void main()
{
    uint index = uint(gl_GlobalInvocationID.x);

    if (index > inputCount)
    {
        return;
    }

    uint activeValue = inputData[index];
    IncrementHistogram(ParseByteAsUint(activeValue, 0));
    IncrementHistogram(ParseByteAsUint(activeValue, 1));
    IncrementHistogram(ParseByteAsUint(activeValue, 2));
    IncrementHistogram(ParseByteAsUint(activeValue, 3));
}

)"; 